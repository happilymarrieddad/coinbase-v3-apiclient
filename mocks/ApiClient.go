// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/happilymarrieddad/coinbase-v3-apiclient (interfaces: ApiClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/QuantFu-Inc/coinbase-adv/model"
	gomock "github.com/golang/mock/gomock"
	apiclient "github.com/happilymarrieddad/coinbase-v3-apiclient"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// CancelExistingOrders mocks base method.
func (m *MockApiClient) CancelExistingOrders(arg0 context.Context, arg1, arg2 string, arg3 model.OrderType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExistingOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExistingOrders indicates an expected call of CancelExistingOrders.
func (mr *MockApiClientMockRecorder) CancelExistingOrders(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExistingOrders", reflect.TypeOf((*MockApiClient)(nil).CancelExistingOrders), arg0, arg1, arg2, arg3)
}

// CancelOrders mocks base method.
func (m *MockApiClient) CancelOrders(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOrders", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockApiClientMockRecorder) CancelOrders(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockApiClient)(nil).CancelOrders), varargs...)
}

// CreateLimitMarketOrder mocks base method.
func (m *MockApiClient) CreateLimitMarketOrder(arg0 context.Context, arg1 *apiclient.CreateLimitMarketOrderParams) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLimitMarketOrder", arg0, arg1)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimitMarketOrder indicates an expected call of CreateLimitMarketOrder.
func (mr *MockApiClientMockRecorder) CreateLimitMarketOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimitMarketOrder", reflect.TypeOf((*MockApiClient)(nil).CreateLimitMarketOrder), arg0, arg1)
}

// CreateOrderAndWaitForCompletion mocks base method.
func (m *MockApiClient) CreateOrderAndWaitForCompletion(arg0 context.Context, arg1 *apiclient.CreateLimitMarketOrderParams, arg2 time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderAndWaitForCompletion", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderAndWaitForCompletion indicates an expected call of CreateOrderAndWaitForCompletion.
func (mr *MockApiClientMockRecorder) CreateOrderAndWaitForCompletion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderAndWaitForCompletion", reflect.TypeOf((*MockApiClient)(nil).CreateOrderAndWaitForCompletion), arg0, arg1, arg2)
}

// GetCurrentWallentAmount mocks base method.
func (m *MockApiClient) GetCurrentWallentAmount(arg0 context.Context, arg1, arg2 string) (*model.Account, *model.Account, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWallentAmount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(*model.Account)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(float64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetCurrentWallentAmount indicates an expected call of GetCurrentWallentAmount.
func (mr *MockApiClientMockRecorder) GetCurrentWallentAmount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWallentAmount", reflect.TypeOf((*MockApiClient)(nil).GetCurrentWallentAmount), arg0, arg1, arg2)
}

// GetOpenOrdersByProductIDAndSide mocks base method.
func (m *MockApiClient) GetOpenOrdersByProductIDAndSide(arg0 context.Context, arg1 string, arg2 model.OrderSide) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrdersByProductIDAndSide", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrdersByProductIDAndSide indicates an expected call of GetOpenOrdersByProductIDAndSide.
func (mr *MockApiClientMockRecorder) GetOpenOrdersByProductIDAndSide(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrdersByProductIDAndSide", reflect.TypeOf((*MockApiClient)(nil).GetOpenOrdersByProductIDAndSide), arg0, arg1, arg2)
}

// GetOrder mocks base method.
func (m *MockApiClient) GetOrder(arg0 context.Context, arg1 string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockApiClientMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockApiClient)(nil).GetOrder), arg0, arg1)
}

// GetOrderFills mocks base method.
func (m *MockApiClient) GetOrderFills(arg0 context.Context, arg1, arg2 string) ([]model.OrderFill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFills", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.OrderFill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderFills indicates an expected call of GetOrderFills.
func (mr *MockApiClientMockRecorder) GetOrderFills(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFills", reflect.TypeOf((*MockApiClient)(nil).GetOrderFills), arg0, arg1, arg2)
}

// GetProduct mocks base method.
func (m *MockApiClient) GetProduct(arg0 context.Context, arg1, arg2 string) (*model.GetProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.GetProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockApiClientMockRecorder) GetProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockApiClient)(nil).GetProduct), arg0, arg1, arg2)
}

// GetProductMarketData mocks base method.
func (m *MockApiClient) GetProductMarketData(arg0 context.Context, arg1, arg2 string, arg3 *float64) (float64, float64, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductMarketData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(float64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetProductMarketData indicates an expected call of GetProductMarketData.
func (mr *MockApiClientMockRecorder) GetProductMarketData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductMarketData", reflect.TypeOf((*MockApiClient)(nil).GetProductMarketData), arg0, arg1, arg2, arg3)
}

// VerifyMarketOrderCompletion mocks base method.
func (m *MockApiClient) VerifyMarketOrderCompletion(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMarketOrderCompletion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyMarketOrderCompletion indicates an expected call of VerifyMarketOrderCompletion.
func (mr *MockApiClientMockRecorder) VerifyMarketOrderCompletion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMarketOrderCompletion", reflect.TypeOf((*MockApiClient)(nil).VerifyMarketOrderCompletion), arg0, arg1, arg2)
}
